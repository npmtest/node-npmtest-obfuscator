{"/home/travis/build/npmtest/node-npmtest-obfuscator/test.js":"/* istanbul instrument in package npmtest_obfuscator */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-obfuscator/lib.npmtest_obfuscator.js":"/* istanbul instrument in package npmtest_obfuscator */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_obfuscator = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_obfuscator = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-obfuscator/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-obfuscator && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_obfuscator */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_obfuscator\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_obfuscator.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_obfuscator.rollup.js'] =\n            local.assetsDict['/assets.npmtest_obfuscator.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_obfuscator.__dirname + '/lib.npmtest_obfuscator.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-obfuscator/node_modules/obfuscator/index.js":"\nmodule.exports = process.env.OBF_COV\n  ? require('./lib-cov/obfuscator')\n  : require('./lib/obfuscator');\n","/home/travis/build/npmtest/node-npmtest-obfuscator/node_modules/obfuscator/lib/obfuscator.js":"\n'use strict';\n\nvar fs = require('fs');\nvar path = require('path');\nvar uglify = require('uglify-js');\nvar utils = require('./utils');\n\nvar rJSON = /\\.json$/;\nvar __require = fs.readFileSync(path.join(__dirname, './require.js'), 'utf-8');\n\nmodule.exports = obfuscator;\n\n\n/**\n * Obfuscate and concatenate a NodeJS _\"package\"_\n * because corporate says so.\n *\n * @api public\n * @param {Object} options The options\n * @param {Function} cb Callback: `function (err, obfuscated)`\n */\n\nfunction obfuscator(options, cb) {\n  if (!options.files || !options.root || !options.entry) {\n    return cb(new TypeError('Invalid options'));\n  }\n\n  obfuscator.concatenate(options, function (err, code) {\n    if (err) {\n      return cb(err);\n    }\n\n    utils.uglify(code, options, cb);\n  });\n}\n\n// back-compat alias\nobfuscator.obfuscator = obfuscator;\n\n/**\n * Expose the current version\n *\n * @api private\n * @type {String}\n */\n\nobfuscator.version = require('../package').version;\n\n/**\n * Expose utils\n *\n * @api private\n * @type {Object}\n */\n\nobfuscator.utils = utils;\n\n/**\n * Create an `options` object for the `obfuscator`\n *\n * Aliases (for back-compat):\n *\n * - `Options`\n * - `ObfuscatorOptions`\n *\n *\n * Examples:\n *\n * ```js\n * var opts = new obfuscator.Options(\n *   // files\n *   [ './myfile.js', './mydir/thing.js'],\n *   // root\n *   './',\n *   // entry\n *   'myfile.js',\n *   // strings\n *   true)\n *\n * var opts = obfuscator.options({...})\n * ```\n *\n * @api public\n * @param {Array} files The files contained in the package\n * @param {String} root The root of the package\n * @param {String} entry The entry point\n * @param {Boolean} [strings] Shall strings be obfuscated\n * @return {Object}\n */\n\nobfuscator.options = function (files, root, entry, strings) {\n  // TODO support globbling\n  if (!Array.isArray(files) || !files.length) {\n    throw new TypeError('Invalid files array');\n  }\n\n  if (typeof root !== 'string' || !root) {\n    throw new TypeError('Invalid root directory');\n  }\n\n  if (typeof entry !== 'string' || !entry) {\n    throw new TypeError('Invalid entry point');\n  }\n\n  return {\n    files: files,\n    root: root,\n    entry: dotslash(entry),\n    strings: strings\n  };\n};\n\n// alias\nobfuscator.Options =\nobfuscator.ObfuscatorOptions = obfuscator.options;\n\n/**\n * Register a `file` in location to `root`\n *\n * @api private\n * @param {String} root\n * @param {String} file\n * @param {Function} cb\n */\n\nobfuscator.register = function (root, file, cb) {\n  var filename = dotslash(path.relative(root, file));\n\n  fs.readFile(file, 'utf-8', function (err, data) {\n    if (err) {\n      return cb(err);\n    }\n\n    var code =\n        'require.register(\"' + filename + '\",'\n      + 'function (module, exports, require) {'\n      + (rJSON.test(file)\n          // just export json\n          ? 'module.exports = ' + data + ';'\n          // add the file as is\n          : data) + '\\n'\n      + '});';\n    return cb(null, code);\n  });\n};\n\n/**\n * Concatenate a list of files for pre-obfuscation\n *\n * @api private\n * @param {Object} options\n * @param {Function} [cb]\n */\n\nobfuscator.concatenate = function (options, cb) {\n  var entry = dotslash(path.relative(options.root, options.entry));\n  var index = -1;\n  var built = [];\n\n  function complete() {\n    // export the exported stuff from entry\n    built.push('this_module.exports = require(\"' + entry + '\");');\n    // end iffe\n    built.push('}(require, module));');\n    // done :)\n    cb(null, built.join('\\n'));\n  }\n\n  // begin iffe with access to node's native\n  // require and the current module\n  built.push('(function (native_require, this_module) {');\n  // add the `require` shim\n  built.push(__require);\n\n  (function next() {\n    index++;\n    var file = options.files[index];\n\n    // no remaining files?\n    if (!file) {\n      return complete();\n    }\n\n    // register the file\n    obfuscator.register(options.root, file, function (err, data) {\n      if (err) {\n        return cb(err);\n      }\n\n      built.push(data);\n      next();\n    });\n  }());\n};\n\n/**\n * Force a filepath to start with _./_\n *\n * @api private\n * @param {String} filepath\n * @return {String}\n */\n\nfunction dotslash(filepath) {\n  filepath = filepath.replace(/\\\\/g, '/');\n  switch (filepath[0]) {\n  case '.':\n  case '/':\n    return filepath;\n  default:\n    return './' + filepath;\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-obfuscator/node_modules/obfuscator/lib/utils.js":"\n'use strict';\n\nvar uglifyjs = require('uglify-js');\nvar merge = require('util')._extend;\n\n/**\n * Create an `AST` from the given `js`, invoking `cb(err, ast)`\n *\n * @api private\n * @param {String} js\n * @param {Function} cb\n */\n\nexports.ast = function (js, cb) {\n  try {\n    var ast = uglifyjs.parse(js);\n    cb(null, ast);\n  } catch (err) {\n    var e = new Error(err.message);\n    // cheap hack to use actual errors\n    // rather than the indecipherable JS_Parse_Error garbage\n    merge(e, err);\n    // expose the bad js\n    e.source = js;\n    cb(e);\n  }\n};\n\n/**\n * Compress the given `ast`, conditionally using `opts`\n *\n * @api private\n * @param {Object} [opts]\n * @return {AST}\n */\n\nexports.compress = function (ast, opts) {\n  opts = opts || exports.compress.defaults;\n  var compressor = uglifyjs.Compressor(opts);\n  // for some stupid reason, this is the\n  // only non-modifier method...\n  return ast.transform(compressor);\n};\n\n/**\n * Default compression options\n *\n * @api private\n * @type {Object}\n */\n\nexports.compress.defaults = {\n  sequences: true,\n  properties: true,\n  dead_code: true,\n  drop_debugger: true,\n  unsafe: true,\n  conditionals: true,\n  comparisons: true,\n  evaluate: true,\n  booleans: true,\n  loops: true,\n  unused: true,\n  hoist_funs: true,\n  hoist_vars: true,\n  if_return: true,\n  join_vars: true,\n  cascade: true,\n  warnings: false\n};\n\n/**\n * Uglify the given `js` with `opts`\n *\n * @api private\n * @param {String} js\n * @param {Object} [opts]\n * @param {Function} cb\n */\n\nexports.uglify = function (js, opts, cb) {\n\n  /**\n   * Handle mangling and compression of the generated `AST`\n   *\n   * @api private\n   * @param {Error} err\n   * @param {AST} ast\n   */\n\n  function handleAST(err, ast) {\n    if (err) return cb(err);\n\n    var stream = new uglifyjs.OutputStream;\n\n    ast.figure_out_scope();\n    ast.mangle_names();\n    ast = exports.compress(ast, opts.compressor);\n\n    if (opts.strings) {\n      ast = mangleStrings(ast);\n      // disable uglify's string escaping to prevent\n      // double escaping our hex\n      stream.print_string = function (str) {\n        return this.print('\"' + str + '\"');\n      };\n    }\n\n    ast.print(stream);\n    return cb(null,  stream.toString());\n  }\n\n  if (typeof opts === 'function') {\n    cb = opts;\n    opts = {};\n  }\n\n  // build the AST\n  exports.ast(js, handleAST);\n};\n\n\n/**\n * Escape map.\n */\n\nvar map = {\n  '\\b': '\\\\b',\n  '\\f': '\\\\f',\n  '\\n': '\\\\n',\n  '\\r': '\\\\r',\n  '\\t': '\\\\t',\n};\n\n/**\n * Convert (or _obfuscate_) a string to its escaped\n * hexidecimal representation.  For example,\n * `hex('a')` will return `'\\x63'`.\n *\n * @api public\n * @name obfuscator.utils.hex\n * @param {String} str\n * @return {String}\n */\n\nexports.hex = function (str) {\n  var result = '';\n\n  for (var i = 0, l = str.length; i < l; i++) {\n    var char = str[i];\n\n    if (map[char]) {\n      result += map[char];\n    } else if ('\\\\' == char) {\n      result += '\\\\' + str[++i];\n    } else {\n      result += '\\\\x' + str.charCodeAt(i).toString(16);\n    }\n  }\n  return result;\n};\n\n\n/**\n * Mangle strings contained in the given `ast`.\n *\n * @api private\n * @param {AST} ast\n * @return {AST} mangled ast\n */\n\nfunction mangleStrings(ast) {\n  var transformer = new uglifyjs.TreeTransformer(null, mangleString);\n  return ast.transform(transformer);\n}\n\n/**\n * Mangle the given `node`, assuming it's an `AST_String`.\n *\n * @api private\n * @param {AST_Node} node\n * @return {AST_Node}\n */\n\nfunction mangleString(node) {\n  if (!(node instanceof uglifyjs.AST_String)) {\n    return;\n  }\n\n  var str = node.getValue();\n  var hex = exports.hex(str);\n  var obj = merge({}, node);\n  obj.value = hex;\n  return new uglifyjs.AST_String(obj);\n}\n","/home/travis/build/npmtest/node-npmtest-obfuscator/node_modules/obfuscator/lib/require.js":"\n// based on TJ Holowaychuk's commonjs require binding\n\nfunction require(p, root) {\n  // third-party module?  use native require\n  if ('.' != p[0] && '/' != p[0])\n    return native_require(p);\n\n  root = root || 'root';\n\n  var path = require.resolve(p);\n\n  // if it's a non-registered json file, it\n  // must be at the root of the project\n  if (!path && /\\.json$/i.test(p))\n    return native_require('./' + require.basename(p));\n\n  var module = require.cache[path];\n\n  if (!module) {\n    try {\n      return native_require(p);\n    } catch (err) {\n      throw new Error('failed to require \"' + p + '\" from ' + root +'\\n' + err.message + '\\n' + err.stack);\n    }\n  }\n\n  if (!module.exports) {\n    module.exports = {};\n    module.call(module.exports, module, module.exports,\n      require.relative(path));\n  }\n\n  return module.exports;\n}\n\n// same as node's `require`\nrequire.cache = {};\n\n// node's native `path.basename`\nrequire.basename = native_require('path').basename;\n\nrequire.resolve = function (path) {\n  // GH-12\n  if ('.' != path[0]) return native_require.resolve(path);\n\n  var pathWithSlash = path.slice(-1) === '/' ? path : path + '/';\n  var paths = [\n    path,\n    path + '.js',\n    pathWithSlash + 'index.js',\n    path + '.json',\n    pathWithSlash + 'index.json'\n  ];\n\n  for (var i = 0, p; p = paths[i]; i++) {\n    if (require.cache[p]) return p;\n  }\n};\n\nrequire.register = function (path, fn) {\n  require.cache[path] = fn;\n};\n\nrequire.relative = function (parent) {\n  function relative(p) {\n    if ('.' != p[0]) return require(p);\n\n    var path = parent.split('/');\n    var segs = p.split('/');\n    path.pop();\n\n    for (var i = 0, len = segs.length; i < len; i += 1) {\n      var seg = segs[i];\n      if ('..' == seg) {\n        path.pop();\n      } else if ('.' != seg) {\n        path.push(seg);\n      }\n    }\n\n    return require(path.join('/'), parent);\n  }\n\n  relative.resolve = require.resolve;\n  relative.cache = require.cache;\n  return relative;\n};\n","/home/travis/build/npmtest/node-npmtest-obfuscator/node_modules/obfuscator/tasks/obfuscator.js":"\nmodule.exports = function () {\n  var err =\n      'Grunt support has been removed from obfusactor.\\n'\n    + 'Please use\\n\\n'\n    + '  https://github.com/stephenmathieson/grunt-obfuscator\\n';\n\n  console.error(err);\n};\n"}